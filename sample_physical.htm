<!DOCTYPE html>
<html>
 <head>
  <title>Sample Rendering with Physical Properties</title>
  <link href="css/index.css" rel="stylesheet" type="text/css">
  <style>
    #canvas_holder{position:relative;top:0}
    #loading_text{display:block;position:absolute;left:50%;top:50%;transform:translate(-50%,-50%);color:white;}
    .dg.main{position:absolute;top:0;right:0;text-align:left;}
  </style>
  <meta name="viewport" content="width=device-width" />
 </head>
 <body>
  <div id="canvas_holder">
   <canvas id="canvas"></canvas>
   <p id="loading_text">Loading...</p>
  </div>
  <script src="js/jquery.min.js"></script>
  <script src="js/three.min.js"></script>
  <script src="js/OrbitControls.js"></script>
  <script src="js/dat.gui.min.js"></script>
  <script src="js/CopyShader.js"></script>
  <script src="js/Pass.js"></script>
  <script src="js/OutlinePass.js"></script>
  <script src="js/ShaderPass.js"></script>
  <script src="js/RenderPass.js"></script>
  <script src="js/MaskPass.js"></script>
  <script src="js/EffectComposer.js"></script>
  <script src="js/colors.js"></script>
  <script src="js/Scene.js"></script>
  <script src="js/LDROptions.js"></script>
  <script src="js/LDRShaders.js"></script>
  <script src="js/LDRColorMaterials.js"></script>
  <script src="js/LDRGeometries.js"></script>
  <script src="js/LDRLoader.js"></script>
  <script src="js/LDRStuds.js"></script>
  <script src="js/StudioTexmap.js"></script>
  <script src="js/LDRGenerator.js"></script>
  <script>
      let startTime = new Date();
      let color = 15;

      // Test models:
      //let model = 'models/corvette_full.mpd';
      //let model = 'models/tnl.mpd'; // Has glow in the dark elements.
      //let model = '6091.dat'; // Has overlap of line and conditional line causing trouble for the normal calculation.
      //let model = '85080.dat'; // Has conditional lines partially overlapping with hard corners, also causing issues for normal calculation.
      let model = '2454aps5.dat';

      // Materials:
      //let model = 'models/luminance.ldr';
      //let model = 'models/chrome.ldr';
      //let model = 'models/rubber.ldr';
      //let model = 'models/speckle.ldr';
      //let model = 'models/metal.ldr';
      //let model = 'models/glitter.ldr';
      //let model = 'models/pearlescent.ldr';
      //let model = 'models/trans.ldr';

      let canvas = document.getElementById('canvas');
      let scene = new ENV.Scene(canvas, color);

      let onWindowResize = () => scene.onChange(window.innerWidth, window.innerHeight);
      window.addEventListener('resize', onWindowResize, false);

      let ldrLoader; // Three.js loader for LDraw models
      let onLoad = function() {
        document.getElementById('loading_text').style.display = 'none';
        console.log("Data loaded after " + (new Date()-startTime) + "ms.");

        let taskList = [];
        ldrLoader.generate(color, scene.mc, taskList);
        console.log("Animation info constructed after " + (new Date()-startTime) + "ms.");

        scene.build();
        scene.buildFloor();
        console.log("Scene built after " + (new Date()-startTime) + "ms.");

        let taskListIdx = 0;
        function animateConstruction() {
          animationID = requestAnimationFrame(animateConstruction);
          if(taskListIdx >= taskList.length) {
            //scene.mc.updateMeshVisibility(); // Hide lines
            LDR.Colors.loadTextures(() => scene.render()); // Ensure that we repaint when textures are loaded.
            cancelAnimationFrame(animationID);
            scene.setUpGui(onWindowResize);
            console.log("Model built after " + (new Date()-startTime) + "ms.");
            onWindowResize(); // Render
            return; // Done.
          }

          let animationStartTime = new Date();
          while((new Date()-animationStartTime) < 20 && taskListIdx < taskList.length) {
            taskList[taskListIdx++]();
          }

          scene.repositionFloor(0.001); // Ensure the floor is placed just below the model - in case it has increased in size since previous frame.
        }
        onWindowResize(); // Render
        animateConstruction();
      }

      LDR.Studs.makeGenerators('', 0, 2); // 0 for lines is ignored. 2 for logo on texture.

      ldrLoader = new THREE.LDRLoader(onLoad, null, {physicalRenderingAge:20});
      ldrLoader.load(model);
  </script>
 </body>
</html>
